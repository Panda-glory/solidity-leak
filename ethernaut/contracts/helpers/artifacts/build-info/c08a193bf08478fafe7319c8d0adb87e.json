{
	"id": "c08a193bf08478fafe7319c8d0adb87e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"sources": {
			"shoot/ethernaut/contracts/helpers/Initializeable-06.sol": {
				"content": "pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This contract provides support for initializing an upgradeable contract.\r\n *\r\n * Whenever the `initialize` function is called, the `initializer` storage slot is set to `true`.\r\n * By verifying that this storage slot is `false` in the constructor, one can make it\r\n * impossible to initialize a contract multiple times.\r\n *\r\n * Contracts that inherit from this one should define their own initializers.\r\n * If a contract is not meant to be upgradeable, the `initializer` function should be empty:\r\n *\r\n *     function initialize() public initializer {\r\n *         // No-op\r\n *     }\r\n *\r\n * The following conditions should hold true to ensure initializer correctness:\r\n *\r\n * - The contract does not use the storage slot with the `initializer` storage layout.\r\n * - The contract cannot be killed, to prevent construction of a new contract with the same address but without the `initializer` slot set to `true`.\r\n *   Even though `selfdestruct` is a function provided by Solidity, directly\r\n *   verifying `msg.sender` in the initializer is sufficient to prevent such an attack\r\n *   without incurring the cost of executing `selfdestruct`.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initializer;\r\n\r\n    /**\r\n     * @dev Modifier to protect the initializer function from being invoked twice.\r\n     */\r\n    modifier onlyInitializer() {\r\n        require(!initializer, \"Initializable: contract is already initialized\");\r\n        initializer = true;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor that sets the initial value of `initializer` to `false`.\r\n     *\r\n     * The following conditions are expected to be met in constructors of derived contracts:\r\n     *\r\n     * - Contract is an upgradeable contract, deployed proximately as a proxy with\r\n     *   an attached `admin` contract as an `admin`, unless `admin` layout is not used\r\n     *   in the contract, in which case the function should be annotated with the\r\n     *   `onlyInitializer` modifier. Upgradeable contract constructors must use\r\n     *   the `onlyInitializer` modifier.\r\n     *\r\n     * - If contract is constructed without the use of `admin` layout,\r\n     *   `initializer` layout constraint checks are not expected.\r\n     *\r\n     * - If the contract intends to enable and accept initializable functions through\r\n     *   its proxies, it must be marked as `abstract`.\r\n     */\r\n    constructor() public {\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"shoot/ethernaut/contracts/helpers/Initializeable-06.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"details": "This contract provides support for initializing an upgradeable contract. Whenever the `initialize` function is called, the `initializer` storage slot is set to `true`. By verifying that this storage slot is `false` in the constructor, one can make it impossible to initialize a contract multiple times. Contracts that inherit from this one should define their own initializers. If a contract is not meant to be upgradeable, the `initializer` function should be empty:     function initialize() public initializer {         // No-op     } The following conditions should hold true to ensure initializer correctness: - The contract does not use the storage slot with the `initializer` storage layout. - The contract cannot be killed, to prevent construction of a new contract with the same address but without the `initializer` slot set to `true`.   Even though `selfdestruct` is a function provided by Solidity, directly   verifying `msg.sender` in the initializer is sufficient to prevent such an attack   without incurring the cost of executing `selfdestruct`.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Constructor that sets the initial value of `initializer` to `false`. The following conditions are expected to be met in constructors of derived contracts: - Contract is an upgradeable contract, deployed proximately as a proxy with   an attached `admin` contract as an `admin`, unless `admin` layout is not used   in the contract, in which case the function should be annotated with the   `onlyInitializer` modifier. Upgradeable contract constructors must use   the `onlyInitializer` modifier. - If contract is constructed without the use of `admin` layout,   `initializer` layout constraint checks are not expected. - If the contract intends to enable and accept initializable functions through   its proxies, it must be marked as `abstract`."
							}
						},
						"stateVariables": {
							"initializer": {
								"details": "Indicates that the contract has been initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"This contract provides support for initializing an upgradeable contract. Whenever the `initialize` function is called, the `initializer` storage slot is set to `true`. By verifying that this storage slot is `false` in the constructor, one can make it impossible to initialize a contract multiple times. Contracts that inherit from this one should define their own initializers. If a contract is not meant to be upgradeable, the `initializer` function should be empty:     function initialize() public initializer {         // No-op     } The following conditions should hold true to ensure initializer correctness: - The contract does not use the storage slot with the `initializer` storage layout. - The contract cannot be killed, to prevent construction of a new contract with the same address but without the `initializer` slot set to `true`.   Even though `selfdestruct` is a function provided by Solidity, directly   verifying `msg.sender` in the initializer is sufficient to prevent such an attack   without incurring the cost of executing `selfdestruct`.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor that sets the initial value of `initializer` to `false`. The following conditions are expected to be met in constructors of derived contracts: - Contract is an upgradeable contract, deployed proximately as a proxy with   an attached `admin` contract as an `admin`, unless `admin` layout is not used   in the contract, in which case the function should be annotated with the   `onlyInitializer` modifier. Upgradeable contract constructors must use   the `onlyInitializer` modifier. - If contract is constructed without the use of `admin` layout,   `initializer` layout constraint checks are not expected. - If the contract intends to enable and accept initializable functions through   its proxies, it must be marked as `abstract`.\"}},\"stateVariables\":{\"initializer\":{\"details\":\"Indicates that the contract has been initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"shoot/ethernaut/contracts/helpers/Initializeable-06.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"shoot/ethernaut/contracts/helpers/Initializeable-06.sol\":{\"keccak256\":\"0xecf7702d5c07af638c4dd980cf77be32e66161dbb74ab1bdc4e848cb5a70bdc9\",\"urls\":[\"bzz-raw://9796e7e446c996bd477885e8452045ac0d933be421006d964fa1402ac281ef4e\",\"dweb:/ipfs/QmdteU4tQucWQGgGQLwei913cBJdS41adkUeURGhJ7ozmc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 5,
								"contract": "shoot/ethernaut/contracts/helpers/Initializeable-06.sol:Initializable",
								"label": "initializer",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "shoot/ethernaut/contracts/helpers/Initializeable-06.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "shoot/ethernaut/contracts/helpers/Initializeable-06.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"shoot/ethernaut/contracts/helpers/Initializeable-06.sol": {
				"ast": {
					"absolutePath": "shoot/ethernaut/contracts/helpers/Initializeable-06.sol",
					"exportedSymbols": {
						"Initializable": [
							26
						]
					},
					"id": 27,
					"license": null,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "27:1155:0",
								"text": " @dev This contract provides support for initializing an upgradeable contract.\n Whenever the `initialize` function is called, the `initializer` storage slot is set to `true`.\n By verifying that this storage slot is `false` in the constructor, one can make it\n impossible to initialize a contract multiple times.\n Contracts that inherit from this one should define their own initializers.\n If a contract is not meant to be upgradeable, the `initializer` function should be empty:\n     function initialize() public initializer {\n         // No-op\n     }\n The following conditions should hold true to ensure initializer correctness:\n - The contract does not use the storage slot with the `initializer` storage layout.\n - The contract cannot be killed, to prevent construction of a new contract with the same address but without the `initializer` slot set to `true`.\n   Even though `selfdestruct` is a function provided by Solidity, directly\n   verifying `msg.sender` in the initializer is sufficient to prevent such an attack\n   without incurring the cost of executing `selfdestruct`."
							},
							"fullyImplemented": true,
							"id": 26,
							"linearizedBaseContracts": [
								26
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "1223:75:0",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 5,
									"mutability": "mutable",
									"name": "initializer",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 26,
									"src": "1304:24:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 4,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1304:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 19,
										"nodeType": "Block",
										"src": "1466:131:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 10,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1485:12:0",
															"subExpression": {
																"argumentTypes": null,
																"id": 9,
																"name": "initializer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "1486:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 11,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1499:48:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 8,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1477:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 12,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1477:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 13,
												"nodeType": "ExpressionStatement",
												"src": "1477:71:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 14,
														"name": "initializer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "1559:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "74727565",
														"id": 15,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1573:4:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1559:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 17,
												"nodeType": "ExpressionStatement",
												"src": "1559:18:0"
											},
											{
												"id": 18,
												"nodeType": "PlaceholderStatement",
												"src": "1588:1:0"
											}
										]
									},
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "1337:96:0",
										"text": " @dev Modifier to protect the initializer function from being invoked twice."
									},
									"id": 20,
									"name": "onlyInitializer",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1463:2:0"
									},
									"src": "1439:158:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "2512:8:0",
										"statements": []
									},
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1605:880:0",
										"text": " @dev Constructor that sets the initial value of `initializer` to `false`.\n The following conditions are expected to be met in constructors of derived contracts:\n - Contract is an upgradeable contract, deployed proximately as a proxy with\n   an attached `admin` contract as an `admin`, unless `admin` layout is not used\n   in the contract, in which case the function should be annotated with the\n   `onlyInitializer` modifier. Upgradeable contract constructors must use\n   the `onlyInitializer` modifier.\n - If contract is constructed without the use of `admin` layout,\n   `initializer` layout constraint checks are not expected.\n - If the contract intends to enable and accept initializable functions through\n   its proxies, it must be marked as `abstract`."
									},
									"id": 25,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2502:2:0"
									},
									"returnParameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2512:0:0"
									},
									"scope": 26,
									"src": "2491:29:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 27,
							"src": "1184:1339:0"
						}
					],
					"src": "0:2523:0"
				},
				"id": 0
			}
		}
	}
}